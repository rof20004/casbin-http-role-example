# Queremos que cada solicitação seja uma tupla de três itens, 
# sendo o primeiro item associado ao atributo denominado `sub`, o segundo` obj` e o terceiro `act`.
# Um exemplo de um pedido válido com base nesta definição é
# `["alice, "blog_post", "read"]` (can `alice` `read` `blog_post`?).
[request_definition]
r = sub, obj, act

# Cada definição de política deve ter uma chave e uma lista de atributos separados por 
# um sinal de igual `=`. No Acx, todas as regras de política têm em comum o atributo `eft` 
# e só pode assumir o valor` "allow" `ou` "deny" `, 
# então você pode omitir isso em sua definição de política.
[policy_definition]
p = sub, obj, act

# O efeito da política define se o acesso deve ser aprovado ou negado 
# Usamos o seguinte efeito de política em nosso sistema de blog para significar que:
#  se houver qualquer regra de política correspondente do tipo `allow` (ou seja,` eft` == "allow"), o efeito final é `allow`. 
# O que também significa que se não houver correspondência ou todas as correspondências forem do tipo `negar`, 
# o efeito final será` negar`.
[policy_effect]
e = some(where (p.eft == allow))

# matchers é apenas uma expressão booleana usada para determinar se 
# uma solicitação corresponde à regra de política fornecida.
[matchers]
m = r.sub == p.sub && keyMatch(r.obj, p.obj) && (r.act == p.act || p.act == "*")

